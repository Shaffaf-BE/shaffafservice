package com.shaffaf.shaffafservice.domain;

import static com.shaffaf.shaffafservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProjectDiscountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectDiscountAllPropertiesEquals(ProjectDiscount expected, ProjectDiscount actual) {
        assertProjectDiscountAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectDiscountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectDiscountAllUpdatablePropertiesEquals(ProjectDiscount expected, ProjectDiscount actual) {
        assertProjectDiscountUpdatableFieldsEquals(expected, actual);
        assertProjectDiscountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectDiscountAutoGeneratedPropertiesEquals(ProjectDiscount expected, ProjectDiscount actual) {
        assertThat(actual)
            .as("Verify ProjectDiscount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectDiscountUpdatableFieldsEquals(ProjectDiscount expected, ProjectDiscount actual) {
        assertThat(actual)
            .as("Verify ProjectDiscount relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDiscountStartDate()).as("check discountStartDate").isEqualTo(expected.getDiscountStartDate()))
            .satisfies(a -> assertThat(a.getDiscountEndDate()).as("check discountEndDate").isEqualTo(expected.getDiscountEndDate()))
            .satisfies(a ->
                assertThat(a.getDiscount()).as("check discount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDiscount())
            )
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedDate()).as("check deletedDate").isEqualTo(expected.getDeletedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectDiscountUpdatableRelationshipsEquals(ProjectDiscount expected, ProjectDiscount actual) {
        assertThat(actual)
            .as("Verify ProjectDiscount relationships")
            .satisfies(a -> assertThat(a.getProject()).as("check project").isEqualTo(expected.getProject()));
    }
}
