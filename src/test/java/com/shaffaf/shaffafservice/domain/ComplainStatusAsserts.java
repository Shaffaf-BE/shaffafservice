package com.shaffaf.shaffafservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ComplainStatusAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainStatusAllPropertiesEquals(ComplainStatus expected, ComplainStatus actual) {
        assertComplainStatusAutoGeneratedPropertiesEquals(expected, actual);
        assertComplainStatusAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainStatusAllUpdatablePropertiesEquals(ComplainStatus expected, ComplainStatus actual) {
        assertComplainStatusUpdatableFieldsEquals(expected, actual);
        assertComplainStatusUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainStatusAutoGeneratedPropertiesEquals(ComplainStatus expected, ComplainStatus actual) {
        assertThat(actual)
            .as("Verify ComplainStatus auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainStatusUpdatableFieldsEquals(ComplainStatus expected, ComplainStatus actual) {
        assertThat(actual)
            .as("Verify ComplainStatus relevant properties")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedOn()).as("check deletedOn").isEqualTo(expected.getDeletedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainStatusUpdatableRelationshipsEquals(ComplainStatus expected, ComplainStatus actual) {
        // empty method
    }
}
