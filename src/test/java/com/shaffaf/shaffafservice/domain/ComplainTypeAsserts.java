package com.shaffaf.shaffafservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ComplainTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainTypeAllPropertiesEquals(ComplainType expected, ComplainType actual) {
        assertComplainTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertComplainTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainTypeAllUpdatablePropertiesEquals(ComplainType expected, ComplainType actual) {
        assertComplainTypeUpdatableFieldsEquals(expected, actual);
        assertComplainTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainTypeAutoGeneratedPropertiesEquals(ComplainType expected, ComplainType actual) {
        assertThat(actual)
            .as("Verify ComplainType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainTypeUpdatableFieldsEquals(ComplainType expected, ComplainType actual) {
        assertThat(actual)
            .as("Verify ComplainType relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedOn()).as("check deletedOn").isEqualTo(expected.getDeletedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainTypeUpdatableRelationshipsEquals(ComplainType expected, ComplainType actual) {
        assertThat(actual)
            .as("Verify ComplainType relationships")
            .satisfies(a -> assertThat(a.getProject()).as("check project").isEqualTo(expected.getProject()));
    }
}
