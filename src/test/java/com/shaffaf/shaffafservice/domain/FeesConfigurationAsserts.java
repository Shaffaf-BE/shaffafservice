package com.shaffaf.shaffafservice.domain;

import static com.shaffaf.shaffafservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FeesConfigurationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesConfigurationAllPropertiesEquals(FeesConfiguration expected, FeesConfiguration actual) {
        assertFeesConfigurationAutoGeneratedPropertiesEquals(expected, actual);
        assertFeesConfigurationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesConfigurationAllUpdatablePropertiesEquals(FeesConfiguration expected, FeesConfiguration actual) {
        assertFeesConfigurationUpdatableFieldsEquals(expected, actual);
        assertFeesConfigurationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesConfigurationAutoGeneratedPropertiesEquals(FeesConfiguration expected, FeesConfiguration actual) {
        assertThat(actual)
            .as("Verify FeesConfiguration auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesConfigurationUpdatableFieldsEquals(FeesConfiguration expected, FeesConfiguration actual) {
        assertThat(actual)
            .as("Verify FeesConfiguration relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getIsRecurring()).as("check isRecurring").isEqualTo(expected.getIsRecurring()))
            .satisfies(a -> assertThat(a.getDueDate()).as("check dueDate").isEqualTo(expected.getDueDate()))
            .satisfies(a -> assertThat(a.getConfiguredBy()).as("check configuredBy").isEqualTo(expected.getConfiguredBy()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedOn()).as("check deletedOn").isEqualTo(expected.getDeletedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesConfigurationUpdatableRelationshipsEquals(FeesConfiguration expected, FeesConfiguration actual) {
        assertThat(actual)
            .as("Verify FeesConfiguration relationships")
            .satisfies(a -> assertThat(a.getUnitType()).as("check unitType").isEqualTo(expected.getUnitType()))
            .satisfies(a -> assertThat(a.getBlock()).as("check block").isEqualTo(expected.getBlock()));
    }
}
