package com.shaffaf.shaffafservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ComplainAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainAllPropertiesEquals(Complain expected, Complain actual) {
        assertComplainAutoGeneratedPropertiesEquals(expected, actual);
        assertComplainAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainAllUpdatablePropertiesEquals(Complain expected, Complain actual) {
        assertComplainUpdatableFieldsEquals(expected, actual);
        assertComplainUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainAutoGeneratedPropertiesEquals(Complain expected, Complain actual) {
        assertThat(actual)
            .as("Verify Complain auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainUpdatableFieldsEquals(Complain expected, Complain actual) {
        assertThat(actual)
            .as("Verify Complain relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getComplainDate()).as("check complainDate").isEqualTo(expected.getComplainDate()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()))
            .satisfies(a -> assertThat(a.getAssignee()).as("check assignee").isEqualTo(expected.getAssignee()))
            .satisfies(a -> assertThat(a.getResolutionComments()).as("check resolutionComments").isEqualTo(expected.getResolutionComments())
            )
            .satisfies(a -> assertThat(a.getResolvedOn()).as("check resolvedOn").isEqualTo(expected.getResolvedOn()))
            .satisfies(a -> assertThat(a.getResolvedBy()).as("check resolvedBy").isEqualTo(expected.getResolvedBy()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedOn()).as("check deletedOn").isEqualTo(expected.getDeletedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplainUpdatableRelationshipsEquals(Complain expected, Complain actual) {
        assertThat(actual)
            .as("Verify Complain relationships")
            .satisfies(a -> assertThat(a.getComplainType()).as("check complainType").isEqualTo(expected.getComplainType()))
            .satisfies(a -> assertThat(a.getComplainStatus()).as("check complainStatus").isEqualTo(expected.getComplainStatus()));
    }
}
