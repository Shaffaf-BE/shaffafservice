package com.shaffaf.shaffafservice.domain;

import static com.shaffaf.shaffafservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SellerCommissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerCommissionAllPropertiesEquals(SellerCommission expected, SellerCommission actual) {
        assertSellerCommissionAutoGeneratedPropertiesEquals(expected, actual);
        assertSellerCommissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerCommissionAllUpdatablePropertiesEquals(SellerCommission expected, SellerCommission actual) {
        assertSellerCommissionUpdatableFieldsEquals(expected, actual);
        assertSellerCommissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerCommissionAutoGeneratedPropertiesEquals(SellerCommission expected, SellerCommission actual) {
        assertThat(actual)
            .as("Verify SellerCommission auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerCommissionUpdatableFieldsEquals(SellerCommission expected, SellerCommission actual) {
        assertThat(actual)
            .as("Verify SellerCommission relevant properties")
            .satisfies(a -> assertThat(a.getCommissionMonth()).as("check commissionMonth").isEqualTo(expected.getCommissionMonth()))
            .satisfies(a -> assertThat(a.getCommissionYear()).as("check commissionYear").isEqualTo(expected.getCommissionYear()))
            .satisfies(a ->
                assertThat(a.getCommissionAmount())
                    .as("check commissionAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCommissionAmount())
            )
            .satisfies(a -> assertThat(a.getCommissionPaidOn()).as("check commissionPaidOn").isEqualTo(expected.getCommissionPaidOn()))
            .satisfies(a -> assertThat(a.getCommissionPaidBy()).as("check commissionPaidBy").isEqualTo(expected.getCommissionPaidBy()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedOn()).as("check deletedOn").isEqualTo(expected.getDeletedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerCommissionUpdatableRelationshipsEquals(SellerCommission expected, SellerCommission actual) {
        assertThat(actual)
            .as("Verify SellerCommission relationships")
            .satisfies(a -> assertThat(a.getProject()).as("check project").isEqualTo(expected.getProject()));
    }
}
