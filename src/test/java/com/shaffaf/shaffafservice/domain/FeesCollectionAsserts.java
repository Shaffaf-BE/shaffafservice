package com.shaffaf.shaffafservice.domain;

import static com.shaffaf.shaffafservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FeesCollectionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesCollectionAllPropertiesEquals(FeesCollection expected, FeesCollection actual) {
        assertFeesCollectionAutoGeneratedPropertiesEquals(expected, actual);
        assertFeesCollectionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesCollectionAllUpdatablePropertiesEquals(FeesCollection expected, FeesCollection actual) {
        assertFeesCollectionUpdatableFieldsEquals(expected, actual);
        assertFeesCollectionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesCollectionAutoGeneratedPropertiesEquals(FeesCollection expected, FeesCollection actual) {
        assertThat(actual)
            .as("Verify FeesCollection auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesCollectionUpdatableFieldsEquals(FeesCollection expected, FeesCollection actual) {
        assertThat(actual)
            .as("Verify FeesCollection relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getAmountCollected())
                    .as("check amountCollected")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAmountCollected())
            )
            .satisfies(a -> assertThat(a.getAmountCollectedBy()).as("check amountCollectedBy").isEqualTo(expected.getAmountCollectedBy()))
            .satisfies(a -> assertThat(a.getAmountCollectedOn()).as("check amountCollectedOn").isEqualTo(expected.getAmountCollectedOn()))
            .satisfies(a -> assertThat(a.getPaidBy()).as("check paidBy").isEqualTo(expected.getPaidBy()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedOn()).as("check deletedOn").isEqualTo(expected.getDeletedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeesCollectionUpdatableRelationshipsEquals(FeesCollection expected, FeesCollection actual) {
        assertThat(actual)
            .as("Verify FeesCollection relationships")
            .satisfies(a -> assertThat(a.getUnits()).as("check units").isEqualTo(expected.getUnits()))
            .satisfies(a -> assertThat(a.getFeesConfiguration()).as("check feesConfiguration").isEqualTo(expected.getFeesConfiguration()));
    }
}
