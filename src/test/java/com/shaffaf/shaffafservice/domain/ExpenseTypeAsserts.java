package com.shaffaf.shaffafservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExpenseTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseTypeAllPropertiesEquals(ExpenseType expected, ExpenseType actual) {
        assertExpenseTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertExpenseTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseTypeAllUpdatablePropertiesEquals(ExpenseType expected, ExpenseType actual) {
        assertExpenseTypeUpdatableFieldsEquals(expected, actual);
        assertExpenseTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseTypeAutoGeneratedPropertiesEquals(ExpenseType expected, ExpenseType actual) {
        assertThat(actual)
            .as("Verify ExpenseType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseTypeUpdatableFieldsEquals(ExpenseType expected, ExpenseType actual) {
        assertThat(actual)
            .as("Verify ExpenseType relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getDeletedOn()).as("check deletedOn").isEqualTo(expected.getDeletedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseTypeUpdatableRelationshipsEquals(ExpenseType expected, ExpenseType actual) {
        assertThat(actual)
            .as("Verify ExpenseType relationships")
            .satisfies(a -> assertThat(a.getProject()).as("check project").isEqualTo(expected.getProject()));
    }
}
